name: Build Images

on:
  workflow_dispatch:
  push:
    tags:
      - '*'

jobs:
  validate:
    name: Validate release
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate_matrix.outputs.result }}
      version: ${{ steps.version_check.outputs.version }}
      os_id: ${{ steps.version_check.outputs.os_id }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Initialization environment
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq upgrade
          sudo apt install shellcheck
      - name: Check shell scripts
        run: |
          for file in $(find . -type f -name "*.sh" -not \( -path "./buildroot/*" -prune \)); do shellcheck --format=gcc $file; done;
      - name: Check buildroot-external packages
        run: |
          buildroot/utils/check-package --exclude PackageHeader --br2-external buildroot-external/package/*/*
      - name: Validate version
        id: version_check
        run: |
          os_id=$(cat ${GITHUB_WORKSPACE}/buildroot-external/meta | grep OS_ID | cut -d'=' -f2)
          major=$(cat ${GITHUB_WORKSPACE}/buildroot-external/meta | grep VERSION_MAJOR | cut -d'=' -f2)
          build=$(cat ${GITHUB_WORKSPACE}/buildroot-external/meta | grep VERSION_BUILD | cut -d'=' -f2)

          tag_major=$(echo "${{ github.ref_name }}" | cut -d '.' -f 1)
          tag_build=$(echo "${{ github.ref_name }}" | cut -d '.' -f 2)
          tag_dev=$(echo "${{ github.ref_name }}" | cut -d '.' -f 3)

          if [ "${major}.${build}" != "${tag_major}.${tag_build}" ]; then
            echo "Version number in Buildroot metadata does not match tag! (${major}.${build} vs. ${{ github.ref_name }})."
            exit 1
          fi

          if [ "${tag_dev}" != "" ]; then
            echo "version=${major}.${build}.${tag_dev}" >> $GITHUB_OUTPUT
          else
            echo "version=${major}.${build}" >> $GITHUB_OUTPUT
          fi

          echo "version_dev=${tag_dev}" >> $GITHUB_OUTPUT
          echo "os_id=${os_id}" >> $GITHUB_OUTPUT
      - name: Create build matrix
        uses: actions/github-script@v6
        id: generate_matrix
        with:
          script: |
            const boards = require("./.github/workflows/matrix.json")
            return { "board": boards }

  build:
    name: Build image for ${{ matrix.board.id }}
    needs:
      - validate
    strategy:
      matrix: ${{ fromJson(needs.validate.outputs.matrix) }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq upgrade
          sudo apt install wget git bc binutils bison linux-headers-$(uname -r) xz-utils
          sudo timedatectl set-timezone "Europe/Vienna"
      - name: Build image
        run: |
          make BUILDDIR=${GITHUB_WORKSPACE} VERSION_DEV=${{ needs.validate.outputs.version_dev }} ${{ matrix.board.defconfig }}
      - name: Upload image
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.validate.outputs.os_id }}-${{ matrix.board.id }}-${{ needs.validate.outputs.version }}.img.xz
          path: ${{ github.workspace }}/release/${{ needs.validate.outputs.os_id }}-${{ matrix.board.id }}-${{ needs.validate.outputs.version }}.img.xz

  release:
    name: Release image for ${{ matrix.board.id }}
    needs:
      - validate
      - build
    strategy:
      matrix: ${{ fromJson(needs.validate.outputs.matrix) }}
    runs-on: ubuntu-latest
    if: |
      github.event.name != 'workflow_dispatch'
      && needs.validate.outputs.version_dev == ''
    steps:
      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.validate.outputs.os_id }}-${{ matrix.board.id }}-${{ needs.validate.outputs.version }}.img.xz
      - name: Release image
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ needs.validate.outputs.os_id }}-${{ matrix.board.id }}-${{ needs.validate.outputs.version }}
          files: ${{ needs.validate.outputs.os_id }}-${{ matrix.board.id }}-${{ needs.validate.outputs.version }}.img.xz
